export const codeString =
` //  Большинство React-приложений «собирают» свои файлы такими инструментами, 
 //  как Webpack, Rollup или Browserify. Сборка (или «бандлинг») — это процесс 
 //  выявления импортированных файлов и объединения их в один «собранный» файл 
 //  (часто называемый «bundle» или «бандл»). Этот бандл после подключения на 
 //  веб-страницу загружает всё приложение за один раз.
 
 // Разделение кода позволяет создавать несколько бандлов и загружать их по мере необходимости.
 // Хоть вы и не уменьшите общий объём кода вашего приложения, но избежите загрузки кода, 
 // который может никогда не понадобиться пользователю и уменьшите объём кода, необходимый 
 // для начальной загрузки.
 
 // Решение о том, где в вашем приложении ввести разделение кода, может быть непростым. 
 // В идеале, следует выбрать такие места, чтобы код разделялся на бандлы примерно одного 
 // размера, тем самым поддерживая хороший пользовательский опыт.
 // 
 // Часто таким удобным местом оказываются маршруты. Большинство интернет-пользователей 
 // привыкли к задержкам во время переходов между страницами. Поэтому и вам может быть 
 // выгодно повторно отрендерить всю страницу целиком. Это не позволит пользователям 
 // взаимодействовать с другими элементами на странице, пока происходит обновление.
 // 
 // Вот пример того, как организовать разделение кода на основе маршрутов с помощью 
 // React.lazy и такой библиотеки как React Router.

import React, { Suspense, lazy } from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

const Home = lazy(() => import('./routes/Home'));
const About = lazy(() => import('./routes/About'));

const App = () => (
  <Router>
    <Suspense fallback={<div>Загрузка...</div>}>
      <Switch>
        <Route exact path="/" component={Home}/>
        <Route path="/about" component={About}/>
      </Switch>
    </Suspense>
  </Router>
);
`;
